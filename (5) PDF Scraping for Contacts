{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "df = pd.read_pickle(\"OPIF_04-06.pkl\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "WMUR-TV    30\n",
       "WBZ-TV     23\n",
       "WCVB-TV    21\n",
       "WPTZ       21\n",
       "WFFF-TV    17\n",
       "WFXT       16\n",
       "KTTC       12\n",
       "KSAX       12\n",
       "WHDH       12\n",
       "KRWF       12\n",
       "KIMT       12\n",
       "KBJR-TV    10\n",
       "KRII       10\n",
       "KFTC       10\n",
       "WCAX-TV    10\n",
       "KAAL        8\n",
       "WAVY-TV     8\n",
       "WHNS        7\n",
       "WABM        7\n",
       "KCNC-TV     6\n",
       "Name: callsign, dtype: int64"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df.candidate == 'BUTTIGIEG']['callsign'].value_counts()[:20]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KTTC       52\n",
       "WMUR-TV    35\n",
       "KXLT-TV    27\n",
       "KIMT       17\n",
       "KAAL       17\n",
       "KVLY-TV    17\n",
       "WDAY-TV    16\n",
       "WDAZ-TV    12\n",
       "KBJR-TV    11\n",
       "WSOC-TV    11\n",
       "KRII       11\n",
       "WTVD       10\n",
       "WHNS        9\n",
       "KOCO-TV     9\n",
       "WVBT        9\n",
       "KFTC        8\n",
       "WSMV-TV     8\n",
       "WAXN-TV     8\n",
       "KMSP-TV     8\n",
       "WAVY-TV     8\n",
       "Name: callsign, dtype: int64"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df.candidate == 'KLOBUCHAR']['callsign'].value_counts()[:20]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "dfa = df[df.candidate == 'KLOBUCHAR'].groupby('callsign').first()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "dfb = df[df.candidate == 'BUTTIGIEG'].groupby('callsign').first()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Successfully created the directory\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "try:\n",
    "    os.mkdir('Buttigieg Files/')\n",
    "    os.mkdir('Klobuchar Files/')\n",
    "except OSError:\n",
    "    print (\"Creation of the directory failed\")\n",
    "else:\n",
    "    print (\"Successfully created the directory\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests, requests_cache, time\n",
    "from IPython.display import clear_output\n",
    "requests_cache.install_cache()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "dfa.reset_index(inplace = True)\n",
    "dfb.reset_index(inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of errors:  1\n"
     ]
    }
   ],
   "source": [
    "n = 0\n",
    "errorCount = 0\n",
    "for url, name in zip(dfa.file_url, dfa.file_name):\n",
    "    print(\"Downloading file {}/{}\".format(n+1,len(dfa)))\n",
    "    \n",
    "    r = requests.get(url, stream = True)\n",
    "    if (r.status_code != 200): \n",
    "        print(url, r.text)\n",
    "        errorCount += 1\n",
    "        time.sleep(2)\n",
    "    else: \n",
    "        with open('Klobuchar Files/' + name + '.pdf', 'wb') as f:\n",
    "            f.write(r.content)\n",
    "        dfa.loc[n,'file_path'] = 'Klobuchar Files/' + name + '.pdf'\n",
    "    if not getattr(r, 'from_cache', False):\n",
    "        time.sleep(0.25)\n",
    "    clear_output(wait = True)\n",
    "    n += 1\n",
    "print(\"Number of errors: \", errorCount)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of errors:  3\n"
     ]
    }
   ],
   "source": [
    "n = 0\n",
    "errorCount = 0\n",
    "for url, name in zip(dfb.file_url, dfb.file_name):\n",
    "    print(\"Downloading file {}/{}\".format(n+1,len(dfb)))\n",
    "    \n",
    "    r = requests.get(url, stream = True)\n",
    "    if (r.status_code != 200): \n",
    "        print(url, r.text)\n",
    "        errorCount += 1\n",
    "        time.sleep(2)\n",
    "    else: \n",
    "        with open('Buttigieg Files/' + name + '.pdf', 'wb') as f:\n",
    "            f.write(r.content)\n",
    "        dfb.loc[n,'file_path'] = 'Buttigieg Files/' + name + '.pdf'\n",
    "    if not getattr(r, 'from_cache', False):\n",
    "        time.sleep(0.25)\n",
    "    clear_output(wait = True)\n",
    "    n += 1\n",
    "print(\"Number of errors: \", errorCount)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>callsign</th>\n",
       "      <th>candidate</th>\n",
       "      <th>entity_id</th>\n",
       "      <th>nielsen_dma_rank</th>\n",
       "      <th>create_ts</th>\n",
       "      <th>file_url</th>\n",
       "      <th>file_name</th>\n",
       "      <th>file_status</th>\n",
       "      <th>file_id</th>\n",
       "      <th>network_affiliation</th>\n",
       "      <th>active_ind</th>\n",
       "      <th>date</th>\n",
       "      <th>file_path</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>92</td>\n",
       "      <td>WTVF</td>\n",
       "      <td>KLOBUCHAR</td>\n",
       "      <td>36504</td>\n",
       "      <td>NASHVILLE</td>\n",
       "      <td>2020-02-20 19:27:18.857000+00:00</td>\n",
       "      <td>https://publicfiles.fcc.gov/api/manager/downlo...</td>\n",
       "      <td>Amy Klobuchar Disclosure Form WTVF 2-19</td>\n",
       "      <td>com_prc</td>\n",
       "      <td>9432083d-64ed-daad-37d8-54c3a328c573</td>\n",
       "      <td>CBS</td>\n",
       "      <td>Y</td>\n",
       "      <td>2020-02-20</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   callsign  candidate entity_id nielsen_dma_rank  \\\n",
       "92     WTVF  KLOBUCHAR     36504        NASHVILLE   \n",
       "\n",
       "                          create_ts  \\\n",
       "92 2020-02-20 19:27:18.857000+00:00   \n",
       "\n",
       "                                             file_url  \\\n",
       "92  https://publicfiles.fcc.gov/api/manager/downlo...   \n",
       "\n",
       "                                  file_name file_status  \\\n",
       "92  Amy Klobuchar Disclosure Form WTVF 2-19     com_prc   \n",
       "\n",
       "                                 file_id network_affiliation active_ind  \\\n",
       "92  9432083d-64ed-daad-37d8-54c3a328c573                 CBS          Y   \n",
       "\n",
       "          date file_path  \n",
       "92  2020-02-20       NaN  "
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## count of 6 for WTVF\n",
    "dfa[dfa.file_path.isnull()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "92    True\n",
       "Name: file_path, dtype: bool"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.isna(dfa[dfa.callsign == 'WTVF']['file_path'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>callsign</th>\n",
       "      <th>candidate</th>\n",
       "      <th>entity_id</th>\n",
       "      <th>nielsen_dma_rank</th>\n",
       "      <th>create_ts</th>\n",
       "      <th>file_url</th>\n",
       "      <th>file_name</th>\n",
       "      <th>file_status</th>\n",
       "      <th>file_id</th>\n",
       "      <th>network_affiliation</th>\n",
       "      <th>active_ind</th>\n",
       "      <th>date</th>\n",
       "      <th>file_path</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>11</td>\n",
       "      <td>KFTC</td>\n",
       "      <td>BUTTIGIEG</td>\n",
       "      <td>83714</td>\n",
       "      <td>MINNEAPOLIS-ST. PAUL</td>\n",
       "      <td>2020-02-25 20:11:21.620000+00:00</td>\n",
       "      <td>https://publicfiles.fcc.gov/api/manager/downlo...</td>\n",
       "      <td>Pete Buttigieg-Disclosure form</td>\n",
       "      <td>com_prc</td>\n",
       "      <td>e3f079a9-d5e5-6518-ef0d-6014e75a42b3</td>\n",
       "      <td>FOX</td>\n",
       "      <td>Y</td>\n",
       "      <td>2020-02-25</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>14</td>\n",
       "      <td>KMGH-TV</td>\n",
       "      <td>BUTTIGIEG</td>\n",
       "      <td>40875</td>\n",
       "      <td>DENVER</td>\n",
       "      <td>2020-02-25 20:15:17.974000+00:00</td>\n",
       "      <td>https://publicfiles.fcc.gov/api/manager/downlo...</td>\n",
       "      <td>Buttigieg Disclosure 2.25</td>\n",
       "      <td>com_prc</td>\n",
       "      <td>22df6a36-1d4c-65e1-6585-e6c1527666e0</td>\n",
       "      <td>ABC</td>\n",
       "      <td>N</td>\n",
       "      <td>2020-02-25</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>63</td>\n",
       "      <td>WLOS</td>\n",
       "      <td>BUTTIGIEG</td>\n",
       "      <td>56537</td>\n",
       "      <td>GREENVLL-SPART-ASHEVLL-AND</td>\n",
       "      <td>2020-03-10 18:55:43.307000+00:00</td>\n",
       "      <td>https://publicfiles.fcc.gov/api/manager/downlo...</td>\n",
       "      <td>Pete Buttigieg Rebates week of 2.23</td>\n",
       "      <td>com_prc</td>\n",
       "      <td>ea18943d-ff39-b678-7cc5-b40fbedd43c1</td>\n",
       "      <td>ABC</td>\n",
       "      <td>Y</td>\n",
       "      <td>2020-03-10</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   callsign  candidate entity_id            nielsen_dma_rank  \\\n",
       "11     KFTC  BUTTIGIEG     83714        MINNEAPOLIS-ST. PAUL   \n",
       "14  KMGH-TV  BUTTIGIEG     40875                      DENVER   \n",
       "63     WLOS  BUTTIGIEG     56537  GREENVLL-SPART-ASHEVLL-AND   \n",
       "\n",
       "                          create_ts  \\\n",
       "11 2020-02-25 20:11:21.620000+00:00   \n",
       "14 2020-02-25 20:15:17.974000+00:00   \n",
       "63 2020-03-10 18:55:43.307000+00:00   \n",
       "\n",
       "                                             file_url  \\\n",
       "11  https://publicfiles.fcc.gov/api/manager/downlo...   \n",
       "14  https://publicfiles.fcc.gov/api/manager/downlo...   \n",
       "63  https://publicfiles.fcc.gov/api/manager/downlo...   \n",
       "\n",
       "                              file_name file_status  \\\n",
       "11       Pete Buttigieg-Disclosure form     com_prc   \n",
       "14            Buttigieg Disclosure 2.25     com_prc   \n",
       "63  Pete Buttigieg Rebates week of 2.23     com_prc   \n",
       "\n",
       "                                 file_id network_affiliation active_ind  \\\n",
       "11  e3f079a9-d5e5-6518-ef0d-6014e75a42b3                 FOX          Y   \n",
       "14  22df6a36-1d4c-65e1-6585-e6c1527666e0                 ABC          N   \n",
       "63  ea18943d-ff39-b678-7cc5-b40fbedd43c1                 ABC          Y   \n",
       "\n",
       "          date file_path  \n",
       "11  2020-02-25       NaN  \n",
       "14  2020-02-25       NaN  \n",
       "63  2020-03-10       NaN  "
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## counts of 10 --> 4 --> 3 files for KFTC, KMGH-TV, and WLOS\n",
    "dfb[dfb.file_path.isnull()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [],
   "source": [
    "dfa.drop(columns = {'create_ts'}).to_excel(\"Klobuchar_stations.xlsx\")\n",
    "dfb.drop(columns = {'create_ts'}).to_excel(\"Buttigieg_stations.xlsx\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [],
   "source": [
    "dfb_x = df[(df.candidate == 'BUTTIGIEG') & ((df.callsign == 'KFTC') | (df.callsign == 'KMGH-TV') | (df.callsign == 'WLOS'))]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [],
   "source": [
    "dfa_x =  df[(df.candidate == 'KLOBUCHAR') & (df.callsign == 'WTVF')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [],
   "source": [
    "dfa_x.drop(columns = {'create_ts'}).to_excel(\"Klob_extra.xlsx\")\n",
    "dfb_x.drop(columns = {'create_ts'}).to_excel(\"Butt_extra.xlsx\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
